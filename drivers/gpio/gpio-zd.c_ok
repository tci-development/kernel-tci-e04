#include <dt-bindings/gpio/gpio.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/ioctl.h>
#include <linux/uaccess.h>
#include <linux/string.h>
#include <linux/wait.h>
#include <linux/types.h>
#include <linux/proc_fs.h>
#include <linux/of.h>
#include <linux/of_gpio.h>
#include <linux/gpio.h>
#include <linux/delay.h>
#include <linux/platform_device.h>
#include <linux/err.h> 

static int gpio5_b2;
static int gpio5_b3;



static ssize_t gpio5_b2_show(struct device *dev,
			struct device_attribute *attr, char *buf)
{
	return sprintf(buf, "%d\n", gpio_get_value(gpio5_b2));
}





static ssize_t gpio5_b2_store(struct device *dev, struct device_attribute *attr,
						const char *buf, size_t size)
{
	int val;
	int ret;

	ret = kstrtoint(buf, 10, &val); 

        if (ret) {
		printk("%s: kstrtoint error return %d\n", __func__, ret);
		return -1;
        }

	if (val== 1) { 

		printk("-czd-: _%s_ :gpio pull up\n", __func__);
		gpio_direction_output(gpio5_b2, val); 

	} else if (val == 0) { 

		printk("-czd-: _%s_ :gpio pull down\n", __func__);
		gpio_direction_output(gpio5_b2, val); 

	} else {

		printk("I only support 0 or 1 to ctrl led\n");

	}
	return size;
}






static ssize_t gpio5_b3_show(struct device *dev,
			struct device_attribute *attr, char *buf)
{
	return sprintf(buf, "%d\n", gpio_get_value(gpio5_b3));
}





static ssize_t gpio5_b3_store(struct device *dev, struct device_attribute *attr,
						const char *buf, size_t size)
{
	int val;
	int ret;

	ret = kstrtoint(buf, 10, &val); 

        if (ret) {
		printk("%s: kstrtoint error return %d\n", __func__, ret);
		return -1;
        }

	if (val== 1) { 

		printk("-czd-: _%s_ :gpio pull up\n", __func__);
		gpio_direction_output(gpio5_b3, val);

	} else if (val == 0) { 

		printk("-czd-: _%s_ :gpio pull down\n", __func__);
		gpio_direction_output(gpio5_b3, val); 

	} else {

		printk("I only support 0 or 1 to ctrl led\n");

	}
	return size;
}



static DEVICE_ATTR(gpio5_b2, 0755, gpio5_b2_show, gpio5_b2_store); 
static DEVICE_ATTR(gpio5_b3, 0755, gpio5_b3_show, gpio5_b3_store); 



static int gpio_ctrl_probe(struct platform_device *pdev) 
{

	struct device_node *led_ctrl_node = pdev->dev.of_node;
	enum of_gpio_flags flags;
	int gpio_value;

	printk("[%d] enter %s start..\n", __LINE__, __func__); 
	
		


	gpio5_b2 = of_get_named_gpio_flags(led_ctrl_node, "gpio5_b2", 0, &flags); 
	printk("gpio5_b2 is %d --\n", gpio5_b2);

	gpio_value = (flags == GPIO_ACTIVE_HIGH)? 1:0;

	if (!gpio_is_valid(gpio5_b2)) { 
		printk("gpio5_b2: %d is invalid\n", gpio5_b2);
		return -ENODEV;
	}

	if (gpio_request(gpio5_b2, "gpio5_b2")) { 
		printk("gpio5_b2: %d request failed!\n", gpio5_b2);
		gpio_free(gpio5_b2); 
		return -ENODEV;
	}
	
	printk("gpio5_b2 value is %d",gpio_value);
	gpio_direction_output(gpio5_b2, gpio_value); 
	printk(" pin level is %d\n", gpio_value); 

    


	gpio5_b3 = of_get_named_gpio_flags(led_ctrl_node, "gpio5_b3", 0, &flags);
	printk("gpio5_b3 is %d --\n", gpio5_b3);

	gpio_value = (flags == GPIO_ACTIVE_HIGH)? 1:0;

	if (!gpio_is_valid(gpio5_b3)) {
		printk("gpio5_b3: %d is invalid\n", gpio5_b3);
		return -ENODEV;
	}

	if (gpio_request(gpio5_b3, "gpio5_b3")) { 
		gpio_free(gpio5_b3); 
		return -ENODEV;
	}
	
	printk("gpio5_b3 value is %d",gpio_value);
	gpio_direction_output(gpio5_b3, gpio_value);
	printk(" pin level is %d\n", gpio_value);



	device_create_file(&pdev->dev, &dev_attr_gpio5_b2);
	device_create_file(&pdev->dev, &dev_attr_gpio5_b3);



	

	printk("[%d]: ___%s___ sucess!\n", __LINE__, __func__);

	return 0;
}

static int led_ctrl_remove(struct platform_device *pdv)
{
	printk("___%s___\n", __func__);
	return 0;
}

static struct of_device_id led_ctrl_match_table[] = {
	{ .compatible = "zd,rk_gpio_out",},
	{},
	};

static struct platform_driver led_ctrl_driver = {

	.driver = {
		.name = "led_ctrl",
		.owner = THIS_MODULE,
		.of_match_table = led_ctrl_match_table,
	},
	.probe = gpio_ctrl_probe,
	.remove = led_ctrl_remove,
	};

static int led_ctrl_init(void)
{
	printk("#led_ctrl#: ___%s___\n", __func__);
	platform_driver_register(&led_ctrl_driver);
	return 0;
}

static void led_ctrl_exit(void)
{
	printk("#led_ctrl#: ___%s___,\n", __func__);
	platform_driver_unregister(&led_ctrl_driver);

}

module_init(led_ctrl_init);
module_exit(led_ctrl_exit);

MODULE_AUTHOR("czd,214241976@qq.com");
MODULE_DESCRIPTION("Driver for control gpio");
MODULE_LICENSE("GPL");


